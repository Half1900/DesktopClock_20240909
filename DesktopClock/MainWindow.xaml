<Window x:Class="DesktopClock.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DesktopClock"
        xmlns:p="clr-namespace:DesktopClock.Properties"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:wp="clr-namespace:WpfWindowPlacement;assembly=WpfWindowPlacement"
        d:DataContext="{d:DesignInstance Type=local:MainWindow}"
        mc:Ignorable="d"
        Title="DesktopClock"
        AllowsTransparency="True"
        Background="Transparent"
        WindowStyle="None"
        ResizeMode="NoResize"
        SizeToContent="WidthAndHeight"
        UseLayoutRounding="True"
        Topmost="{Binding Topmost, Source={x:Static p:Settings.Default}, Mode=TwoWay}"
        ShowInTaskbar="{Binding ShowInTaskbar, Source={x:Static p:Settings.Default}, Mode=TwoWay}"
        FontFamily="{Binding FontFamily, Source={x:Static p:Settings.Default}, Mode=OneWay}"
        MouseDown="Window_MouseDown"
        MouseDoubleClick="Window_MouseDoubleClick"
        MouseWheel="Window_MouseWheel"
        ContentRendered="Window_ContentRendered"
        Closed="Window_Closed"
        Cursor="Hand"
        wp:WindowPlacementProperties.Placement="{Binding Placement, Source={x:Static p:Settings.Default}, Mode=TwoWay}">
	<Window.Resources>
		<ContextMenu x:Key="MainContextMenu" x:Shared="False">
			<MenuItem Command="{Binding CopyToClipboardCommand}" Header="复制数据" />

            <MenuItem 
                      Header="隐藏窗口" 
			          IsCheckable="True"
			          IsChecked="{Binding ShowOrHide, Source={x:Static p:Settings.Default}, Mode=TwoWay}"/>

            <Separator />

			<MenuItem Header="置顶窗口"
			          IsCheckable="True"
			          IsChecked="{Binding Topmost, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />

			<MenuItem Header="状态栏显示"
			          IsCheckable="True"
			          IsChecked="{Binding ShowInTaskbar, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />

			<MenuItem Header="开机自启动"
			          IsCheckable="True"
			          IsChecked="{Binding RunOnStartup, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />

			<MenuItem Header="显示背景色"
			          IsCheckable="True"
			          IsChecked="{Binding BackgroundEnabled, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />

			<MenuItem Header="可拖动窗口"
			          IsCheckable="True"
			          IsChecked="{Binding DragToMove, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />

			<MenuItem>
				<MenuItem.Header>
					<StackPanel Orientation="Horizontal">
						<TextBlock Text="大小设置 " />

						<Slider Width="80"
                                AutoToolTipPlacement="TopLeft"
                                IsSnapToTickEnabled="True"
						        Maximum="180"
						        Minimum="10"
						        Value="{Binding Height,  Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
					</StackPanel>
				</MenuItem.Header>
			</MenuItem>

			<MenuItem Header="主题设置" ItemsSource="{x:Static local:Theme.DefaultThemes}">
				<MenuItem.Resources>
					<Style TargetType="MenuItem">
						<Setter Property="Command" Value="{Binding DataContext.SetThemeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />

						<Setter Property="CommandParameter" Value="{Binding}" />

						<Setter Property="DisplayMemberPath" Value="Name" />
					</Style>
				</MenuItem.Resources>
			</MenuItem>

			<MenuItem Header="时区设置" ItemsSource="{x:Static local:DateTimeUtil.TimeZones}">
				<MenuItem.Resources>
					<Style TargetType="MenuItem">
						<Setter Property="Command" Value="{Binding DataContext.SetTimeZoneCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />

						<Setter Property="CommandParameter" Value="{Binding}" />
					</Style>
				</MenuItem.Resources>
			</MenuItem>

			<MenuItem Header="日期格式" ItemsSource="{x:Static local:DateFormatExample.DefaultExamples}">
				<MenuItem.Resources>
					<Style TargetType="MenuItem">
						<Style.Triggers>
							<DataTrigger Binding="{Binding}" Value="{x:Static local:DateFormatExample.Tutorial}">
								<Setter Property="Command" Value="{Binding DataContext.FormatWizardCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />

								<Setter Property="IsEnabled" Value="{x:Static p:Settings.CanBeSaved}" />
							</DataTrigger>
						</Style.Triggers>

						<Setter Property="Command" Value="{Binding DataContext.SetFormatCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />

						<Setter Property="CommandParameter" Value="{Binding Format}" />

						<Setter Property="DisplayMemberPath" Value="Example" />
					</Style>
				</MenuItem.Resources>
			</MenuItem>

			<Separator />

            <MenuItem Command="{Binding NewClockCommand}"
			          Header="新建时钟"
			          IsEnabled="{x:Static p:Settings.CanBeSaved}" />

            <MenuItem Command="{Binding OpenSettingsCommand}"
			          Header="高级设置"
			          IsEnabled="{x:Static p:Settings.CanBeSaved}" />

			<MenuItem Command="{Binding ExitCommand}" Header="退出" />
		</ContextMenu>

		<tb:TaskbarIcon x:Key="TrayIcon"
		                x:Shared="False"
		                IconSource="DesktopClock.ico"
		                ToolTipText="DesktopClock"
		                MenuActivation="LeftOrRightClick" />
	</Window.Resources>

	<Viewbox Height="{Binding Height, Source={x:Static p:Settings.Default}, Mode=OneWay}">
		<Border CornerRadius="{Binding BackgroundCornerRadius, Source={x:Static p:Settings.Default}, Mode=OneWay}" Padding="1,1,1,0">
			<Border.Style>
				<Style TargetType="Border">
					<Setter Property="Background">
						<Setter.Value>
							<SolidColorBrush Opacity="{Binding BackgroundOpacity, Source={x:Static p:Settings.Default}, Mode=OneWay}" Color="{Binding OuterColor, Source={x:Static p:Settings.Default}, Mode=OneWay}" />
						</Setter.Value>
					</Setter>

					<Style.Triggers>
						<DataTrigger Binding="{Binding BackgroundEnabled, Source={x:Static p:Settings.Default}, Mode=OneWay}" Value="False">
							<DataTrigger.Setters>
								<Setter Property="Background" Value="Transparent" />
							</DataTrigger.Setters>
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</Border.Style>

			<local:OutlinedTextBlock Text="{Binding CurrentTimeOrCountdownString}"
			                         StrokeThickness="{Binding OutlineThickness, Source={x:Static p:Settings.Default}, Mode=OneWay}"
			                         TextWrapping="Wrap">

				<local:OutlinedTextBlock.Fill>
					<SolidColorBrush Color="{Binding TextColor, Source={x:Static p:Settings.Default}, Mode=OneWay}" />
				</local:OutlinedTextBlock.Fill>

				<local:OutlinedTextBlock.Style>
					<Style TargetType="local:OutlinedTextBlock">
						<Setter Property="Stroke" Value="Transparent" />
						<Setter Property="Margin" Value="0" />

						<Style.Triggers>
							<DataTrigger Binding="{Binding BackgroundEnabled, Source={x:Static p:Settings.Default}, Mode=OneWay}" Value="False">
								<DataTrigger.Setters>
									<Setter Property="Stroke">
										<Setter.Value>
											<SolidColorBrush Color="{Binding OuterColor, Source={x:Static p:Settings.Default}, Mode=OneWay}" />
										</Setter.Value>
									</Setter>

									<Setter Property="Margin" Value="{Binding OutlineThickness, Source={x:Static p:Settings.Default}, Mode=OneWay}" />
								</DataTrigger.Setters>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</local:OutlinedTextBlock.Style>
			</local:OutlinedTextBlock>
		</Border>
	</Viewbox>
</Window>
